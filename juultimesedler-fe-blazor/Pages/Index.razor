@page "/"
@using juultimesedler_fe_blazor.Shared.Models.DTOs;

<PageTitle>Index</PageTitle>

@*HEADLINE*@
<MudText Class="company-headline" Typo="Typo.h4">Juul Timesedler</MudText>

@*WEEKS & DAYS*@
<MudPaper Elevation="5">
    <MudText Typo="Typo.h6">Weeks &amp; days</MudText>
    <MudDivider />

    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudIcon Icon="@Icons.Material.Filled.ChevronLeft" Title="Prev. Week" />
        <MudSpacer />
        <MudText Typo="Typo.h5">Week # 26</MudText>
        <MudSpacer />
        <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Title="Next Week" />
    </MudAppBar>
    <MudTabs AlwaysShowScrollButtons="true"
             Class="mt-4"
             Color="@Color.Info"
             Rounded="true">
        <MudTabPanel Text="Monday" />
        <MudTabPanel Text="Tuesday" />
        <MudTabPanel Text="Wednesday" />
        <MudTabPanel Text="Thursday" />
        <MudTabPanel Text="Friday" />
        <MudTabPanel Text="Saturday" />
        <MudTabPanel Text="Sunday" />
    </MudTabs>
</MudPaper>
<br />

<MudForm>
    @*PROJECTS*@
    <MudPaper Elevation="5">
        <MudItem>
            <MudText Typo="Typo.h6">Projects</MudText>
            <MudAutocomplete
                @bind-Value="project"
                Clearable
                Label="Select project"
                OnClearButtonClick="ClearProject"
                SearchFunc="ChooseProject"
                T="string"
            />
        </MudItem>
    </MudPaper>
    <MudDivider />
    <br />

    @*STARTING TIME & ENDING TIME*@
    <MudPaper Elevation="5">
        @* STARTING TIME *@
        <MudItem>
            <MudText Typo="Typo.h6">Time</MudText>
            <MudTimePicker Adornment="Adornment.Start"
                           Label="Starting Time"
                           PickerVariant="PickerVariant.Dialog"
                           TimeEditMode="TimeEditMode.OnlyHours"
            @bind-Time="startingTime">
                <PickerActions>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.startTime, 0)">:00</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.startTime, 15)">:15</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.startTime, 30)">:30</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.startTime, 45)">:45</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => context.Close())">Ok</MudButton>
                </PickerActions>
            </MudTimePicker>

        </MudItem>
        <br />

        @* ENDING TIME *@
        <MudItem>
            <MudTimePicker Adornment="Adornment.Start"
                           Label="Ending Time"
                           PickerVariant="PickerVariant.Dialog"
                           TimeEditMode="TimeEditMode.OnlyHours"
            @bind-Time="endingTime">
                <PickerActions>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.endingTime, 0)">:00</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.endingTime, 15)">:15</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.endingTime, 30)">:30</MudButton>
                    <MudButton Class="mud-theme-primary" @onclick="() => SetPredefinedMinutes(Times.endingTime, 45)">:45</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() => context.Close())">Ok</MudButton>
                </PickerActions>
            </MudTimePicker>

        </MudItem>
    </MudPaper>
    <br />

    @*TASKS*@
    <MudPaper Elevation="5">
        <MudText Typo="Typo.h6">Tasks</MudText>
        <MudTextField @bind-Value="Search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
        <MudSelect T="string" Label="Tasks" MultiSelection="true" Variant="Variant.Outlined">
            <MudSelectItem T="string">Slæbe gips</MudSelectItem>
            <MudSelectItem T="string">Skære gips</MudSelectItem>
            <MudSelectItem T="string">Sætte gips op</MudSelectItem>
        </MudSelect>

        <br />
    </MudPaper>
    <br />

    @*COMMENTS*@
    <MudPaper Elevation="5">
        <MudTextField T="string" Label="Comments" Variant="Variant.Outlined" Text="200.- for diesel" Lines="5"></MudTextField>
    </MudPaper>
    <br />

    @*SUBMIT*@
    <MudButton Class="submit-btn"
               Color="Color.Primary"
               Variant="Variant.Filled">Send</MudButton>
    <br />
    <br />
</MudForm>

@code {
    #region INIT Variables & Services
    HttpClient httpClient = new();
    private string baseUri = "https://localhost";
    private int apiPort = 44352;
    private string endpointPrefix = "api";
    private string project;
    private List<string> projects = new();
    public string Search { get; set; }
    public enum Times{ startTime, endingTime }
    TimeSpan? startingTime = new TimeSpan(02, 35, 00);
    TimeSpan? endingTime = new TimeSpan(02, 35, 00);

    ProjectService projectService = new();
    #endregion

    #region METHODS
    public void SetPredefinedMinutes(Times whichTime, int minutes)
    {
        if (whichTime == Times.endingTime)
        {
            endingTime = TimeSpan.Parse(endingTime!.Value.Hours + ":" + minutes + ":00");
        }
        else
        {
            startingTime = TimeSpan.Parse(startingTime!.Value.Hours + ":" + minutes + ":00");
        }
        Console.WriteLine(endingTime);
    }
    private async Task<IEnumerable<string>> ChooseProject(string project)
    {
        if (string.IsNullOrEmpty(project))
        {
            return projects;
        }
        return projects.Where(p => p.Contains(project, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task ClearProject(){ project = string.Empty; }
    #endregion

    #region BLAZOR CONFIG
    protected override async Task OnInitializedAsync()
    {
        string uri = baseUri + ":" + apiPort + "/" + endpointPrefix + "/projects";
        IEnumerable<GetProjectDTO> fetchedProjects = await projectService.GetProjects(httpClient, uri);

        foreach (GetProjectDTO project in fetchedProjects)
        {
            projects.Add(project.ProjectFullName);
        }
    }
    #endregion
}